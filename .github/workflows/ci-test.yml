# File: .github/workflows/ci-test.yml
# Path: .github/workflows/ci-test.yml

name: CI/CD Pipeline - Test and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # MARK: ━━━ Backend Tests ━━━

  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests
        working-directory: ./backend
        run: |
          pytest --cov=app --cov-report=term-missing --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/htmlcov/coverage.xml
          flags: backend
          name: backend-coverage

  # MARK: ━━━ Frontend Tests ━━━

  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/frontend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          pytest --tb=short

  # MARK: ━━━ Integration Tests ━━━

  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -r frontend/requirements.txt

      - name: Start backend server
        working-directory: ./backend
        run: |
          python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run integration tests
        run: |
          python test_complete_system.py

      - name: Test API endpoints
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/api/v1/orders || exit 1

  # MARK: ━━━ Code Quality ━━━

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black mypy

      - name: Run flake8
        run: |
          flake8 backend/ frontend/ --max-line-length=79 --extend-ignore=E203,W503

      - name: Run black check
        run: |
          black --check backend/ frontend/

      - name: Run mypy
        run: |
          mypy backend/ frontend/ --ignore-missing-imports

  # MARK: ━━━ Security Scan ━━━

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        run: |
          python -m pip install bandit
          bandit -r backend/ -f json -o bandit-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: bandit-report.json

# EOF